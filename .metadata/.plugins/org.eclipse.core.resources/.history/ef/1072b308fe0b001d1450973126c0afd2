package com.globallogic.helloworld;

import java.util.*;

public class Mapping {
public static void main(String[] args) {
	Map<Students,Det> map=new HashMap<Students,Det>();
	Scanner sc = new Scanner(System.in);
	boolean t = true;

	while (t == true) 
	{
		if (t == true)
		{
			System.out.println("1. Add the Student Data");
			System.out.println("2. Delete the Student data");
			System.out.println("3. Search the Student details");
			System.out.println("4. Sort the Student Details");
			System.out.println("5. Update the Student Data");
			
			int i = sc.nextInt();
			switch(i){
			case 1:{
				System.out.println("enter name");
				String s = sc.next();
				System.out.println("enter age");
				int a = sc.nextInt();
				System.out.println("enter class in integer");
				int clas = sc.nextInt();
				System.out.println("enter roll number");
				int id = sc.nextInt();
	        	if(map.keySet().contains(s)){
				System.out.println("already a value");
	         	}
			else{
   			map.put(new Students(s, id), new Det(clas, a));
				System.out.println("Data Added Successfully");
			}
				break;
			}
			case 2:{
				System.out.println("Enter the person Id to be deleted");
				int id = sc.nextInt();
				//< Map.Entry<Students,Det> >
				Iterator itr=map.entrySet().iterator();
			while(itr.hasNext()){
				 Map.Entry<Students,Det> mapElement= itr.next();
				 
					if(mapElement.getKey().getRo()==id){
						itr.remove();
					}
				}
				System.out.println(map);
				break;
			}
			case 3:{
				System.out.println("Enter the person name to be Search");
				String na = sc.next();
				for(Map.Entry<Students, Det>  entry:map.entrySet()){
					if(entry.getKey().getName().equals(na)){
						System.out.println(entry);
					}
				}
				break;
			}
			case 4:{
				TreeMap<Students,Det> ma=new TreeMap<Students,Det>(map);
				System.out.println(ma.toString());
				break;
			}
			case 5:{
				System.out.println("Enter the person name to be Updated");
				int id = sc.nextInt();
				Iterator itr=map.entrySet().iterator();
				while(itr.hasNext()){
					 Map.Entry<Students,Det> mapElement= (Map.Entry<Students,Det>)itr.next();
					 
						if(mapElement.getKey().getRo()==id){
							itr.remove();
							
						}
					}
				System.out.println("enter name");
				String s = sc.next();
				System.out.println("enter age");
				int a = sc.nextInt();
				System.out.println("enter class in integer");
				int clas = sc.nextInt();
				map.put(new Students(s, id), new Det(clas, a));
						System.out.println(map);
				break;
			}
			default:{
				System.out.println("Invalid input");
			}
				
			}
			System.out.println("Do you want to continue");
			t = sc.nextBoolean();
			
		}
		
		else{
			System.out.println("Invalid input");
		}
	}
	
}
}

	class Students implements Comparable<Students>{
		private String name;
		private int ro;

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ro;
			result = prime * result + ((name == null) ? 0 : name.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Students other = (Students) obj;
			if (ro != other.ro)
				return false;
			if (name == null) {
				if (other.name != null)
					return false;
			} else if (!name.equals(other.name))
				return false;
			return true;
		}

		public Students(String name, int ro) {
			super();
			this.name = name;
			this.ro = ro;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public int getRo() {
			return ro;
		}

		public void setAge(int ro) {
			this.ro = ro;
		}

		@Override
		public String toString() {
			return "Students [name=" + name + ", roll=" + ro + "]";
		}

		public int compareTo(Students o) {
			// TODO Auto-generated method stub
			if(this.ro>o.ro)
			return 1;
			else if(this.ro<o.ro)
				return -1;
			else
				return 0;
		}

	}

class Det{
	private int cla;
	private int age;
	public int getCla() {
		return cla;
	}
	public void setCla(int cla) {
		this.cla = cla;
	}
	public int getAge() {
		return age;
	}
	public void setRoll(int roll) {
		this.age = age;
	}
	public Det(int cla, int roll) {
		super();
		this.cla = cla;
		this.age = age;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + cla;
		result = prime * result + age;
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Det other = (Det) obj;
		if (cla != other.cla)
			return false;
		if (age != other.age)
			return false;
		return true;
	}
	@Override
	public String toString() {
		return "Det [cla=" + cla + ", Age=" + age + "]";
	}
	
	
}
